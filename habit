#!/usr/bin/env bash

set -eo pipefail

# set -x

# colors
declare red="\e[1;31m"
declare yellow="\e[1;33m"
declare cyan="\e[1;36m"
declare reset="\e[0m"

# constants
declare -r HABIT_CONFIG_DIR="$HOME/.habit"
declare -r HABIT_CONFIG_LOG="$HOME/.habit/log"
declare -r HABIT_CONFIG_GOALS="$HOME/.habit/goals"

x.help() {
  printf '
habit is a program that functions as a journal of your
habits/doings. You can visualize the weekly, monthly or
total progress of those habits/doings.

They are written to a file under $HOME/.habit/log which you
can access by doing `habit edit`.

Commands:
  help             Show help commands
  add              Adds an habit/doing entry
  edit             Opens the log file in the default $EDITOR
  goal             Adds an goal entry of an habit/doing
  list             Display the progress of the current week,
                   month or in total

'
}

x.add() {
  local date slug habit="${1}" time="${2}"

  if [[ -z $habit ]] || [[ -z $time ]]; then
    echo "Invalid arguments."
    exit 1
  fi

  date=$(date +%Y-%m-%d)
  slug=$(echo "$habit" | slugify)

  mkdir -p "$HABIT_CONFIG_DIR"
  echo "${habit}|${time}|${date}|${slug}" >>"$HABIT_CONFIG_LOG"
  echo " ✨ Nice job! Added ${habit} to your tracking log..."
}

# Writes an weekly goal into the $HABIT_CONFIG_GOALS file
#
# habit - the habit being tracked
# type - how the hours will be tracked ("weekly", "monthly")
# hours - the number of hours to spent on a habit
#
# Note: I wont track monthly because I only need weekly; a feature to be
# added.
x.goal() {
  local habit="${1}" hours="${2}" type="weekly"

  if [[ -z $habit ]] || [[ -z $hours ]] || [[ -z $type ]]; then
    echo "Invalid arguments."
    exit 1
  fi

  slug=$(echo "$habit" | slugify)

  mkdir -p "$HABIT_CONFIG_DIR"
  echo "${habit}|${hours}|${type}|${slug}" >>"$HABIT_CONFIG_GOALS"
  echo " ✨ Tracking ${habit}! Added ${habit} to your goals log..."
}

x.edit.habits() { popup nvim "$HABIT_CONFIG_LOG"; }
x.edit.goals() { popup nvim "$HABIT_CONFIG_GOALS"; }

x.list() {
  local -A logs
  local -A habits
  local -A goals

  # process weekly goals
  #
  while IFS="|" read -ra log; do
    [[ -z "${log[0]}" ]] && continue

    habit="${log[0]}"
    hours="${log[1]}"
    type="${log[2]}"
    slug="${log[3]}"

    if [[ $type == "weekly" ]]; then
      goals["${slug}.title"]=$habit
      goals["${slug}.hours"]=$hours
    fi
  done <"$HABIT_CONFIG_GOALS"

  # process weekly habits
  #
  while IFS="|" read -ra log; do
    [[ -z "${log[0]}" ]] && continue

    habit="${log[0]}"
    time="${log[1]}"
    date="${log[2]}"
    slug="${log[3]}"

    currentWeekNumber=$(gdate -d "$date" +"%V")
    weekDay=$(gdate -d "$date" +"%u")

    index="${slug}.${currentWeekNumber}.${weekDay}"

    count="${logs["${index}.count"]}"

    if [[ -z $count ]]; then
      # get update all the slugs
      habits["${slug}"]="$slug"

      logs["${index}.count"]=1
      logs["${index}.title"]="$habit"
      logs["${index}.time"]="$time"
      logs["${index}.date"]="$date"
    else
      totalCounter=:
      totalTimeInvested=:

      currentCounter="${logs["${index}.count"]}"
      currentTime="${logs["${index}.time"]}"

      ((totalCounter = currentCounter + 1))
      ((totalTimeInvested = currentTime + time))

      logs["${index}.count"]=$totalCounter
      logs["${index}.time"]=$totalTimeInvested

    fi

  done <"$HABIT_CONFIG_LOG"

  currentWeekNumber=$(gdate +"%V")
  currentWeekDay=$(gdate +"%u")

  # get the total weekly invested
  #
  local -A totalInvested
  for ((i = 1; i <= currentWeekDay; i++)); do
    for slug in ${!habits[*]}; do
      index="${slug}.${currentWeekNumber}.${i}"
      count="${logs["${index}.count"]}"

      [[ -z $count ]] && continue

      time="${logs["${index}.time"]}"

      currentTotalInvested="${totalInvested["${slug}"]}"

      ((currentTotalInvested += time))

      totalInvested["${slug}"]=$currentTotalInvested
    done
  done

  # display the results
  #

  padlimit=60
  pad=$(printf '%*s' "$padlimit")
  pad=${pad// /.}

  padlength=40

  for weekDay in {1..7}; do
    case $weekDay in
    1)
      printf "\n"
      echo -e "${yellow}Monday:${reset}"
      ;;
    2)
      printf "\n"
      echo -e "${yellow}Tuesday:${reset}"
      ;;
    3)
      printf "\n"
      echo -e "${yellow}Wednesday:${reset}"
      ;;
    4)
      printf "\n"
      echo -e "${yellow}Thursday:${reset}"
      ;;
    5)
      printf "\n"
      echo -e "${yellow}Friday:${reset}"
      ;;
    6)
      printf "\n"
      echo -e "${yellow}Saturday:${reset}"
      ;;
    7)
      printf "\n"
      echo -e "${yellow}Sunday:${reset}"
      ;;
    esac

    # Print all your tracked habits
    for slug in ${!habits[*]}; do
      index="${slug}.${currentWeekNumber}.${weekDay}"

      weekIndex="${logs["${index}.count"]}"

      if [[ -n $weekIndex ]]; then
        title="${logs["${index}.title"]}"
        count="${logs["${index}.count"]}"
        time="${logs["${index}.time"]}"
        date="${logs["${index}.date"]}"
        time=$(bc <<<"scale=2; ${time}/60")

        printf '   %s (%s) ' "$title" "$count"
        printf '%*.*s' 0 $((padlength - ${#title})) "$pad"
        printf " H: ${cyan}%s${reset}\n" "$time"
      fi
    done

    # Print all your missing habits based on goals
    if [[ "$weekDay" == "$currentWeekDay" ]]; then
      for slug in ${!habits[*]}; do
        index="${slug}.${currentWeekNumber}.${weekDay}"

        title="${goals["${slug}.title"]}"
        goalTime="${goals["${slug}.hours"]}"

        timeInvested="${totalInvested["${slug}"]}"

        if [[ -n $goalTime ]]; then
          timeLeft=$(((goalTime - timeInvested)))
          timeLeftInHours=$(bc <<<"scale=2; ${timeLeft}/60")

          if [[ $timeLeft -gt 0 ]]; then
            printf "   ${red}%s (n)${reset} " "$title"
            printf "${red}%*.*s${reset}" 0 $((padlength - ${#title})) "$pad"
            printf " ${red}H: %s${reset}\n" "$timeLeftInHours"
          fi
        fi
      done
    fi

  done

  printf "\n"
}

x.list.month() {
  local -A logs
  local -A habits

  while IFS="|" read -ra log; do

    [[ -z "${log[0]}" ]] && continue

    habit="${log[0]}"
    time="${log[1]}"
    date="${log[2]}"
    slug="${log[3]}"

    monthNumber=$(gdate -d "$date" +"%m")

    index="${slug}.${monthNumber}"

    count="${logs["${index}.count"]}"

    if [[ -z $count ]]; then
      habits["${slug}"]="$slug"

      logs["${index}.count"]=1
      logs["${index}.title"]="$habit"
      logs["${index}.time"]="$time"

    else
      totalCounter=:
      totalTimeInvested=:

      currentCounter="${logs["${index}.count"]}"
      currentTime="${logs["${index}.time"]}"

      ((totalCounter = currentCounter + 1))
      ((totalTimeInvested = currentTime + time))

      logs["${index}.count"]=$totalCounter
      logs["${index}.time"]="$totalTimeInvested"
    fi
  done <"$HABIT_CONFIG_LOG"

  padlimit=60
  pad=$(printf '%*s' "$padlimit")
  pad=${pad// /.}

  padlength=40

  printf "\n"
  echo -e "${yellow}This Month:${reset}"

  currentMonth=$(gdate +"%m")

  for slug in ${!habits[*]}; do

    index="${slug}.${currentMonth}"

    title="${logs["${index}.title"]}"
    count="${logs["${index}.count"]}"
    time="${logs["${index}.time"]}"

    time=$(bc <<<"scale=2; ${time}/60")

    printf '   %s (%s) ' "$title" "$count"
    printf '%*.*s' 0 $((padlength - ${#title})) "$pad"
    printf " H: ${cyan}%s${reset}\n" "$time"
  done
  printf "\n"
}

# ----------------- completion & cmd automation -------------------
#
# Adapted from: https://github.com/rwxrob/cmd-zet

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=("${line##declare -f x.}")
done < <(declare -F)

mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

declare -A HABITS

while IFS="|" read -ra log; do
  habit="${log[0]}"
  HABITS["${habit}"]="$habit"
done <"$HABIT_CONFIG_LOG"

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }

  if [[ ${line,,} =~ add ]]; then
    line=${line//add /}
    for c in "${HABITS[@]}"; do
      [[ ${c:0:${#line}} == "${line}" ]] && echo "$c"
    done
  elif [[ ${line,,} =~ goal ]]; then
    line=${line//goal /}
    for c in "${HABITS[@]}"; do
      [[ ${c:0:${#line}} == "${line}" ]] && echo "$c"
    done
  else
    for c in "${COMMANDS[@]}"; do
      [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
    done
  fi
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"
  shift

  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

x.help "$@"
